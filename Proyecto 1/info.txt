https://man7.org/linux/man-pages/man2/

https://youtu.be/a8tR6d47bCc?si=NaY7pvdO45_8Xbrc

https://youtu.be/3U9Likm9YHo?si=P433rO8Jw1VMMGha



Directorio de memoria compartida:    cd /dev/shm/  


Consultar los archivos compartidos:   ls -l


Para borrar el espacio de memoria creado:   rm nombre_memoria_compartida
+ rm statsMemory
+ rm sharedMemory
+ rm sem.myreconstructor
+ rm sem.mycliente
+ rm sem.mycreador







void initializeCircularBuffer(int numChars, size_t sharedSize) {
    // Crea o abre el objeto de memoria compartida
    int fd = shm_open(MEMORY_OBJECT_NAME, O_CREAT | O_RDWR, 0666);
    if (fd == -1) {
        perror("Error al crear/abrir el objeto de memoria compartida");
        exit(EXIT_FAILURE);
    }

    // Establece el tamaño del objeto de memoria compartida
    if (ftruncate(fd, sharedSize) == -1) {
        perror("Error al establecer el tamaño de la memoria compartida");
        exit(EXIT_FAILURE);
    }

    // Mapea la memoria compartida a la estructura SharedMemory
    SharedMemory *sharedMemory = (SharedMemory *)mmap(NULL, sharedSize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (sharedMemory == MAP_FAILED) {
        perror("Error al mapear la memoria compartida");
        exit(EXIT_FAILURE);
    }

    // Inicializa la estructura SharedMemory
    sharedMemory->bufferSize = numChars;
    sharedMemory->buffer = malloc(sharedSize); 
    if (sharedMemory->buffer == NULL) {
        perror("Error al asignar memoria para el buffer");
        exit(EXIT_FAILURE);
    }

    // Llena el buffer con caracteres nulos
    memset(sharedMemory->buffer, '\0', numChars);

    // Visualiza el contenido de la memoria compartida
    printf("Visualización en tiempo real del contenido de la memoria compartida:\n");
    while (1) {
        printf("\r Contenido del buffer: %s", sharedMemory->buffer);
        fflush(stdout);
        sleep(1); // Espera 1 segundo antes de volver a visualizar
    }

    // Libera la memoria del buffer
    free(sharedMemory->buffer);

    // Desvincula y cierra la memoria compartida
    munmap(sharedMemory, sharedSize);
    close(fd);
}





